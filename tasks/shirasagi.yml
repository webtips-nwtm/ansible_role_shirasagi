---
- name: Manage repositories and packages
  block:
    - name: Update dnf cache for RedHat系
      ansible.builtin.dnf:
        update_cache: yes
      become: true

    - name: Check if EPEL repository is already installed
      ansible.builtin.stat:
        path: /etc/yum.repos.d/epel.repo
      register: epel_repo
      changed_when: false

    - name: Add EPEL repository (disabled by default)
      ansible.builtin.yum_repository:
        name: epel
        description: "Extra Packages for Enterprise Linux"
        baseurl: "https://download.fedoraproject.org/pub/epel/$releasever/Everything/$basearch"
        gpgcheck: yes
        gpgkey: "https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-$releasever"
        enabled: no # 無効化
        state: present
      when: epel_repo.stat.exists == false

    - name: Ensure EPEL repository excludes Zabbix packages
      ansible.builtin.lineinfile:
        path: /etc/yum.repos.d/epel.repo
        regexp: "^excludepkgs="
        line: "excludepkgs=zabbix*"
        insertafter: "^#.*baseurl=.*"
        create: yes # ファイルが存在しない場合は作成
        state: present
      when: epel_repo.stat.exists == false

    - name: Ensure EPEL repository includes 'excludepkgs=' line if missing
      ansible.builtin.lineinfile:
        path: /etc/yum.repos.d/epel.repo
        regexp: "^#.*baseurl=.*"
        line: "excludepkgs=zabbix*"
        state: present
      when: epel_repo.stat.exists == true

    - name: Install Development Tools on Red Hat-based systems
      ansible.builtin.dnf:
        name: "@Development Tools"
        state: present

    - name: Install ImageMagick with EPEL temporarily enabled on Red Hat-based systems
      ansible.builtin.dnf:
        name:
          - ImageMagick
          - ImageMagick-devel
        enablerepo: epel
        disable_gpg_check: yes
        state: present

  when: ansible_os_family == "RedHat"

- name: Ensure git is installed
  ansible.builtin.package:
    name: git
    state: present

- name: Get system architecture
  ansible.builtin.setup:
    filter: ansible_architecture
  register: arch_info
  changed_when: false

- name: Set architecture variable
  ansible.builtin.set_fact:
    architecture: "{{ arch_info.ansible_facts.ansible_architecture }}"
  when: arch_info.ansible_facts.ansible_architecture is defined

- name: Clone Shirasagi repository with a specific branch
  ansible.builtin.git:
    repo: "{{ shirasagi_repo }}"
    dest: "{{ shirasagi_dir }}"
    version: "{{ shirasagi_branch }}"
    update: yes

- name: Find .rb files in config/samples
  ansible.builtin.find:
    paths: "{{ shirasagi_dir }}/config/samples"
    patterns: "*.rb"
  register: rb_files

- name: Copy .rb files from config/samples to config
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ shirasagi_dir }}/config/"
    remote_src: yes
    mode: "0644"
  loop: "{{ rb_files.files }}"
  when: rb_files.matched > 0

- name: Find .yml files in config/samples
  ansible.builtin.find:
    paths: "{{ shirasagi_dir }}/config/samples"
    patterns: "*.yml"
  register: yml_files

# - name: Copy .yml files from config/samples to config
#   ansible.builtin.copy:
#     src: "{{ item.path }}"
#     dest: "{{ shirasagi_dir }}/config/"
#     remote_src: yes
#     mode: "0644"
#     checksum: no
#   loop: "{{ yml_files.files }}"
#   when: yml_files.matched > 0

- name: Copy .yml files from config/samples to config
  ansible.builtin.copy:
    src: "{{ item.path }}"
    dest: "{{ shirasagi_dir }}/config/"
    remote_src: yes
    mode: "0644"
  loop: "{{ yml_files.files }}"
  when: yml_files.matched > 0

# Bundlerのインストールと実行
- name: Set ASDF path in environment
  ansible.builtin.set_fact:
    asdf_path: "/root/.asdf/bin:/root/.asdf/shims"

- name: Check if bundler is installed in vendor/bundle
  ansible.builtin.shell: |
    export PATH="$PATH:{{ asdf_path }}" && bundle show bundler
  args:
    chdir: "{{ shirasagi_dir }}"
    executable: /bin/bash
  register: bundler_check
  failed_when: false
  changed_when: false

- name: Install bundler if not installed
  ansible.builtin.shell: |
    export PATH="$PATH:{{ asdf_path }}" && gem install bundler
  args:
    executable: /bin/bash
  when: "'Could not find gem' in bundler_check.stdout"
  become: true
  become_user: root

- name: Fix permissions of /var/www/shirasagi
  ansible.builtin.file:
    path: "{{ shirasagi_dir }}"
    owner: root
    group: root
    mode: "0755"
  become: true

- name: Check if all gems are installed
  ansible.builtin.shell: |
    export PATH="$PATH:{{ asdf_path }}" && bundle check
  args:
    chdir: "{{ shirasagi_dir }}"
    executable: /bin/bash
  register: bundle_check
  failed_when: false
  changed_when: false

- name: Install necessary Ruby gems with bundle install
  ansible.builtin.shell: |
    export PATH="$PATH:{{ asdf_path }}" && bundle install --deployment --without development test
  args:
    chdir: "{{ shirasagi_dir }}"
    executable: /bin/bash
  environment:
    BUNDLE_PATH: vendor/bundle
  when: bundle_check.rc != 0
  become: true
  become_user: root

- name: Create /etc/profile.d/disable-spring.sh to disable Spring
  copy:
    content: |
      export DISABLE_SPRING=1
    dest: /etc/profile.d/disable-spring.sh
    owner: root
    group: root
    mode: "0755"

- name: Copy the systemd service file
  copy:
    src: "{{ shirasagi_dir }}/bin/unicorn-centos7_asdf.service"
    dest: /etc/systemd/system/unicorn.service
    remote_src: yes
    owner: root
    group: root
    mode: "0755"
    force: no # 冪等性のために既存ファイルが異なる場合のみ上書き

- name: Add EnvironmentFile line to the systemd service file
  lineinfile:
    path: /etc/systemd/system/unicorn.service
    line: "EnvironmentFile=/etc/sysconfig/unicorn"
    insertafter: "User=root"
    state: present

- name: Ensure /etc/sysconfig directory exists
  file:
    path: /etc/sysconfig
    state: directory

- name: Create /etc/sysconfig/unicorn with memory limits
  copy:
    content: |
      UNICORN_KILLER_MEM_MIN=576
      UNICORN_KILLER_MEM_MAX=640
    dest: /etc/sysconfig/unicorn
    owner: root
    group: root
    mode: "0644"

- name: Create systemd service file for Shirasagi Job Server
  ansible.builtin.copy:
    dest: /etc/systemd/system/shirasagi-job.service
    content: |
      [Unit]
      Description=Shirasagi Job Server
      After=mongod.service

      [Service]
      User=root
      WorkingDirectory=/var/www/shirasagi
      Type=simple
      Restart=always
      ExecStart=/bin/bash -lc '. /root/.asdf/asdf.sh && bundle exec rake job:run'
      ExecStop=/usr/bin/kill -QUIT $MAINPID

      [Install]
      WantedBy=multi-user.target

- name: Copy job.yml from defaults to config
  copy:
    src: "{{ shirasagi_dir }}/config/defaults/job.yml"
    dest: "{{ shirasagi_dir }}/config/job.yml"
    owner: root
    group: root
    mode: "0644"
    remote_src: yes
    force: no # 冪等性のために既存ファイルが異なる場合のみコピー

- name: Replace mode:on_demand with mode:"service" in job.yml
  replace:
    path: "{{ shirasagi_dir }}/config/job.yml"
    regexp: 'mode: "on_demand"'
    replace: 'mode: "service"'

- name: Reload systemd to recognize the new service file
  systemd:
    daemon_reload: yes

- name: Enable and start unicorn.service
  systemd:
    name: unicorn.service
    enabled: yes
    state: started

- name: Enable and start shirasagi-job.service
  systemd:
    name: shirasagi-job.service
    enabled: yes
    state: started
