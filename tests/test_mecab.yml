---
- name: Test MeCab and MeCab Ruby installation
  hosts: all
  become: true
  roles:
    - ansible_role_shirasagi
  tasks:
    - name: Ensure Development Tools group is installed
      ansible.builtin.dnf:
        name: "@Development Tools"
        state: present

    - name: Ensure required packages for build are installed
      ansible.builtin.dnf:
        name:
          - wget
        state: present

    - name: Install MeCab and related packages
      ansible.builtin.dnf:
        name:
          - mecab
          - mecab-devel
        state: present
        enablerepo:
          - epel
          - crb

    - name: Download MeCab packages
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "/usr/local/src/{{ item.tar_name }}"
      loop: "{{ mecab_packages }}"

    - name: Install MeCab packages
      block:
        - name: Extract MeCab package
          ansible.builtin.unarchive:
            src: "/usr/local/src/{{ item.tar_name }}"
            dest: "/usr/local/src"
            remote_src: yes
            creates: "/usr/local/src/{{ item.tar_name | replace('.tar.gz', '') }}"
          loop: "{{ mecab_packages }}"
          loop_control:
            loop_var: item

        - name: Check if the patch is already applied
          shell: "patch --dry-run -p1 < /usr/local/src/{{ item.patch }}"
          args:
            chdir: "/usr/local/src/{{ item.tar_name | replace('.tar.gz', '') }}"
          when: item.patch is defined
          register: patch_check
          failed_when: "'Skipping patch.' not in patch_check.stdout and patch_check.rc != 0"
          changed_when: "'Skipping patch.' not in patch_check.stdout"
          loop: "{{ mecab_packages }}"
          loop_control:
            loop_var: item

        - name: Apply the patch if it's not already applied
          shell: "patch -p1 < /usr/local/src/{{ item.patch }}"
          args:
            chdir: "/usr/local/src/{{ item.tar_name | replace('.tar.gz', '') }}"
          when:
            - item.patch is defined
            - patch_check.stdout is defined
            - "'Skipping patch.' not in patch_check.stdout"
          register: patch_apply_result
          changed_when: "'Skipping patch.' not in patch_apply_result.stdout"
          loop: "{{ mecab_packages }}"
          loop_control:
            loop_var: item

        - name: Run configure for MeCab packages
          block:
            - name: Run configure for standard MeCab packages
              ansible.builtin.command: "./configure {{ item.configure_options }}"
              args:
                chdir: "/usr/local/src/{{ item.tar_name | replace('.tar.gz', '') }}"
              when:
                - item.name != "MeCab Ruby" # MeCab Ruby 以外の場合にのみ ./configure を実行
              loop: "{{ mecab_packages }}"
              loop_control:
                loop_var: item

            - name: Generate Makefile for MeCab Ruby
              shell: |
                . ~/.asdf/asdf.sh
                ruby extconf.rb
              args:
                chdir: "/usr/local/src/mecab-ruby-0.996"
              when: item.name == "MeCab Ruby"
              loop: "{{ mecab_packages }}"
              loop_control:
                loop_var: item

        - name: Build MeCab packages
          ansible.builtin.shell: "make"
          args:
            chdir: "/usr/local/src/{{ item.tar_name | replace('.tar.gz', '') }}"
          loop: "{{ mecab_packages }}"
          loop_control:
            loop_var: item

        - name: Install MeCab packages
          ansible.builtin.shell: "make install"
          args:
            chdir: "/usr/local/src/{{ item.tar_name | replace('.tar.gz', '') }}"
          loop: "{{ mecab_packages }}"
          loop_control:
            loop_var: item

    - name: Update shared library cache
      ansible.builtin.lineinfile:
        path: /etc/ld.so.conf
        line: "/usr/local/lib"
        state: present

    - name: Run ldconfig
      ansible.builtin.command:
        cmd: ldconfig
